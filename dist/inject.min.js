;(() => {
  // ===== Clean previous overlay =====
  let el;
  el = document.getElementById('__unfollowers_host__'); if (el) el.remove();
  el = document.getElementById('__unfollowers_backdrop__'); if (el) el.remove();


  // ===== Helpers =====
  const sleep = ms => new Promise(r => setTimeout(r, ms));
  const TRACK_W = 44, TRACK_H = 22, KNOB = 18, PAD = 2, TRAVEL = (TRACK_W - PAD*2 - KNOB); // 22px


  // ===== Session / user =====
  const m = document.cookie.match(/ds_user_id=(\d+)/);
  const userId = m ? m[1] : null;
  if (!userId) { alert('No encontr√© tu sesi√≥n de Instagram (ds_user_id). / Instagram session not found.'); return; }


  const mUser = document.cookie.match(/(?:^|;) *ds_user=([^;]+)/);
  let currentUsername = mUser ? decodeURIComponent(mUser[1]) : 'amig@';


  let avatarHTML =
    '<div style="width:36px;height:36px;border-radius:50%;border:2px solid #ccc;background:#ddd;display:flex;align-items:center;justify-content:center;font-weight:700;color:#333;">' +
    String((currentUsername && currentUsername[0]) ? currentUsername[0] : '?').toUpperCase() +
    '</div>';


  async function getUserInfo(uid) {
    const urls = ['/api/v1/users/' + uid + '/info/', '/api/v1/users/' + uid + '/info/'];
    for (let i = 0; i < urls.length; i++) {
      try {
        const res = await fetch(urls[i], {
          headers: { 'x-ig-app-id': '936619743392459' },
          credentials: 'same-origin'
        });
        if (res.ok) return await res.json();
      } catch (e) {}
    }
    return null;
  }
  const userInfoPromise = getUserInfo(userId);


  // ===== Themes & Strings =====
  const THEMES = {
    light: {
      text: '#111', subtext: '#555', muted: '#777', border: '#e5e7eb', card: '#fff',
      progressTrack: '#f1f5f9', inputBg: '#fff', inputBorder: '#d0d5dd',
      linkText: '#111', badgeBg: '#eef2f7', badgeText: '#111', badgeBorder: '#d0d5dd',
      chipBg: '#fff'
    },
    dark: {
      text: '#f1f1f1', subtext: '#c7c7c7', muted: '#9aa0a6', border: '#303030', card: '#1e1e1e',
      progressTrack: '#2a2a2a', inputBg: '#262626', inputBorder: '#3a3a3a',
      linkText: '#f1f1f1', badgeBg: '#33393f', badgeText: '#fff', badgeBorder: '#4a4a4a',
      chipBg: '#232323'
    }
  };
  const STR = {
    es: {
      greet: u => 'Hola <strong>@' + u + '</strong> üëã',
      sub1: '¬øQui√©n te dej√≥ de seguir en Instagram? üïµÔ∏è‚Äç‚ôÇÔ∏èüíî',
      sub2: '*Solo muestra a los que t√∫ sigues... y que ya no te siguen de vuelta üôÉ',
      filterPh: 'üîç Filtrar por nombre o usuario',
      verified: 'Incluir cuentas verificadas',
      onlyVerified: 'Solo cuentas verificadas',
      onTxt: 'S√≠', offTxt: 'No',
      ready: '¬øEst√°s listo?', scanning: 'Escaneando...', stopped: 'Escaneo detenido manualmente.',
      done: n => 'Escaneo completado: ' + n + ' no te siguen',
      start: 'Iniciar', stop: 'Detener', restart: 'Reiniciar',
      copy: 'Copiar lista', copied: '‚úÖ Lista de usuarios copiada.',
      download: 'Descargar lista', file: 'no_te_siguen.txt',
      noname: '(Sin nombre)', unfollow: 'Dejar de seguir',
      progress: (p, s, t) => p + '% - ' + s + ' de ' + t
    },
    en: {
      greet: u => 'Hi <strong>@' + u + '</strong> üëã',
      sub1: 'Who unfollowed you on Instagram? üïµÔ∏è‚Äç‚ôÇÔ∏èüíî',
      sub2: '*Shows only people you follow‚Ä¶ who no longer follow you back üôÉ',
      filterPh: 'üîç Filter by name or username',
      verified: 'Include verified accounts',
      onlyVerified: 'Verified accounts only',
      onTxt: 'Yes', offTxt: 'No',
      ready: 'Are you ready?', scanning: 'Scanning...', stopped: 'Scan stopped manually.',
      done: n => 'Scan completed: ' + n + ' don‚Äôt follow you',
      start: 'Start', stop: 'Stop', restart: 'Restart',
      copy: 'Copy list', copied: '‚úÖ User list copied.',
      download: 'Download list', file: 'non_followers.txt',
      noname: '(No name)', unfollow: 'Unfollow',
      progress: (p, s, t) => p + '% - ' + s + ' of ' + t
    }
  };
  const systemTheme = () => (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) ? 'dark' : 'light';
  let theme = localStorage.getItem('theme') || systemTheme();
  const savedLang = localStorage.getItem('lang');
  const navLang = (Array.isArray(navigator.languages) ? navigator.languages[0] : navigator.language) || 'en';
  let lang = savedLang || (String(navLang).toLowerCase().indexOf('es') === 0 ? 'es' : 'en');
  if (!savedLang) localStorage.setItem('lang', lang);
  const S = () => STR[lang];


  // ===== Overlay + Host =====
  const backdrop = document.createElement('div');
  backdrop.id = '__unfollowers_backdrop__';
  Object.assign(backdrop.style, {
    position: 'fixed', inset: 0, zIndex: '2147483646',
    background: 'rgba(0,0,0,.35)', WebkitBackdropFilter: 'blur(2px)', backdropFilter: 'blur(2px)',
    opacity: 0, transition: 'opacity .18s ease'
  });
  document.body.appendChild(backdrop); requestAnimationFrame(() => backdrop.style.opacity = 1);


  const host = document.createElement('div');
  host.id = '__unfollowers_host__';
  Object.assign(host.style, {
    position: 'fixed', inset: 0, zIndex: '2147483647',
    display: 'flex', alignItems: 'flex-start', justifyContent: 'center',
    padding: '5vh 2vw', pointerEvents: 'auto'
  });
  document.body.appendChild(host);


  // ===== refs & state =====
  let container, scrollInner, closeBtn, headerCard, controlsRow,
      title,
      chipRow, includeRow, includeLabel, includeTrack, includeKnob, includeStateTxt, includeState = true,
      onlyRow, onlyLabel, onlyTrack, onlyKnob, onlyStateTxt, onlyState = false,
      progressBar, progressFill, progressLabel,
      filterInput, list, status, footer,
      buttonContainer, startBtn, copyBtn, downloadBtn, stopBtn, restartBtn,
      bottomGrid, leftCol, rightCol, statusCard, statusPill, statusDot, versionCard,
      langTrack, langKnob, langLeftLbl, langRightLbl,
      themeTrack, themeKnob, themeLeftLbl, themeRightLbl,
      actionBar, listObserver, styleTag;


  let runState = 'idle';
  let after = null, hasNext = true, shouldStop = false, nonFollowers = [], scanned = 0, total = 0;


  // ===== UI base =====
  container = document.createElement('div');
  Object.assign(container.style, {
    position: 'relative', boxSizing: 'border-box',
    width: 'min(95vw, 760px)', maxHeight: '90vh',
    borderRadius: '18px', padding: '0',
    overflow: 'visible',
    fontFamily: 'system-ui, -apple-system, Segoe UI, Roboto, sans-serif',
    transform: 'scale(.98)', opacity: '0',
    transition: 'transform .18s ease, opacity .18s ease'
  });
  requestAnimationFrame(() => { container.style.transform = 'scale(1)'; container.style.opacity = '1'; });
  host.appendChild(container);


  // <style> con hover SIEMPRE rojo para los botones de unfollow
  styleTag = document.createElement('style');
  styleTag.textContent = `
    #__unfollowers_host__ .__uf_unfbtn:hover {
      background:#ef4444 !important;
      color:#fff !important;
      border-color:#ef4444 !important;
    }
  `;
  document.head.appendChild(styleTag);


  // inner scrolleable
  scrollInner = document.createElement('div');
  Object.assign(scrollInner.style, {
    maxHeight: '90vh',
    overflowY: 'auto',
    padding: '12px',
    borderRadius: '18px'
  });
  container.appendChild(scrollInner);


  // Close button
  closeBtn = document.createElement('button');
  closeBtn.textContent = '‚úï';
  Object.assign(closeBtn.style, {
    position: 'absolute', top: '8px', right: '8px',
    width: '34px', height: '34px', borderRadius: '999px',
    display: 'flex', alignItems: 'center', justifyContent: 'center',
    border: '1px solid transparent', cursor: 'pointer',
    background: '#fff', boxShadow: '0 4px 14px rgba(0,0,0,.15)',
    fontSize: '18px', lineHeight: '1', zIndex: '9999',
    transition: 'transform .18s ease, background .15s ease, color .15s ease, box-shadow .18s ease'
  });
  closeBtn.onclick = () => { try{ if(listObserver) listObserver.disconnect(); }catch(e){} host.remove(); backdrop.remove(); styleTag.remove(); };
  container.appendChild(closeBtn);


  // Header wrap
  const hWrap = document.createElement('div');
  Object.assign(hWrap.style, { display:'grid', gap:'10px', marginBottom:'10px' });
  scrollInner.appendChild(hWrap);


  // Row compacta con ES/EN y ‚òÄÔ∏è/üåô (una sola fila)
  controlsRow = document.createElement('div');
  Object.assign(controlsRow.style, {
    display: 'flex', alignItems: 'center', justifyContent: 'space-between', gap: '8px', flexWrap: 'wrap'
  });
  hWrap.appendChild(controlsRow);


  const miniRow = document.createElement('div');
  Object.assign(miniRow.style, { display:'flex', alignItems:'center', gap:'12px', flexWrap:'wrap' });
  controlsRow.appendChild(miniRow);


  function makeToggleTrackSmall(){
    const t = document.createElement('div');
    Object.assign(t.style, {
      width: TRACK_W+'px', height: TRACK_H+'px', borderRadius:'999px',
      position:'relative', display:'flex', alignItems:'center',
      padding: PAD+'px', cursor:'pointer', userSelect:'none', border:'1px solid'
    }); return t;
  }
  function makeKnobSmall(){
    const k = document.createElement('div');
    Object.assign(k.style, {
      width: KNOB+'px', height: KNOB+'px', borderRadius:'999px',
      transition:'transform .18s ease', boxShadow:'0 1px 3px rgba(0,0,0,.18)', border:'1px solid', background:'#fff'
    }); return k;
  }
  function label(text){ const s=document.createElement('span'); s.textContent=text; Object.assign(s.style,{fontSize:'12px',fontWeight:'700'}); return s; }


  // Idioma: ES [toggle] EN
  langLeftLbl = label('ES');
  langRightLbl = label('EN');
  langTrack = makeToggleTrackSmall(); langKnob = makeKnobSmall(); langTrack.appendChild(langKnob);


  // Tema: ‚òÄÔ∏è [toggle] üåô
  themeLeftLbl = label('‚òÄÔ∏è'); themeRightLbl = label('üåô');
  themeTrack = makeToggleTrackSmall(); themeKnob = makeKnobSmall(); themeTrack.appendChild(themeKnob);


  const langGroup = document.createElement('div');
  Object.assign(langGroup.style,{display:'flex',alignItems:'center',gap:'6px'});
  langGroup.append(langLeftLbl, langTrack, langRightLbl);


  const themeGroup = document.createElement('div');
  Object.assign(themeGroup.style,{display:'flex',alignItems:'center',gap:'6px'});
  themeGroup.append(themeLeftLbl, themeTrack, themeRightLbl);


  miniRow.append(langGroup, themeGroup);


  // Header t√≠tulo
  headerCard = document.createElement('div');
  Object.assign(headerCard.style, {
    borderRadius: '14px', padding: '10px', border: '1px solid', display:'flex', alignItems:'center', gap:'10px'
  });
  hWrap.appendChild(headerCard);


  title = document.createElement('div');
  function renderTitle(){
    title.innerHTML =
      '<div style="display:flex;align-items:center;gap:10px;">' +
      avatarHTML +
      '<div>' +
      '<div style="font-size:16px;font-weight:700;">' + S().greet(currentUsername) + '</div>' +
      '<div style="font-size:12px;opacity:.9;margin-top:4px;">' + S().sub1 + '</div>' +
      '<div style="font-size:12px;opacity:.9;">' + S().sub2 + '</div>' +
      '</div></div>';
  }
  renderTitle();
  headerCard.appendChild(title);


  // ===== Chips Row (middle switches, compact) =====
  chipRow = document.createElement('div');
  Object.assign(chipRow.style, { display: 'grid', gridTemplateColumns: '1fr', gap: '8px', marginTop:'4px', marginBottom:'6px' });
  scrollInner.appendChild(chipRow);


  function makeSwitchRowChip(labelText){
    const chip = document.createElement('div');
    Object.assign(chip.style,{
      display:'flex', alignItems:'center', justifyContent:'space-between',
      borderRadius:'12px', padding:'8px 10px', border:'1px solid'
    });
    const label = document.createElement('span'); label.textContent = labelText; Object.assign(label.style,{fontSize:'13px'});
    const right = document.createElement('div'); Object.assign(right.style,{display:'flex',alignItems:'center',gap:'6px'});


    const track = makeToggleTrackSmall();
    const knob  = makeKnobSmall();
    track.appendChild(knob);


    const txt = document.createElement('span'); Object.assign(txt.style,{fontSize:'12px',minWidth:'18px'});
    right.append(track, txt);
    chip.append(label, right);
    return {chip,label,track,knob,txt};
  }


  // Include verified
  { const r = makeSwitchRowChip(STR[lang].verified);
    includeRow = r.chip; includeLabel = r.label; includeTrack = r.track; includeKnob = r.knob; includeStateTxt = r.txt;
    chipRow.appendChild(includeRow);
  }
  // Only verified
  { const r = makeSwitchRowChip(STR[lang].onlyVerified);
    onlyRow = r.chip; onlyLabel = r.label; onlyTrack = r.track; onlyKnob = r.knob; onlyStateTxt = r.txt;
    chipRow.appendChild(onlyRow);
  }


  // Clicks switches middle
  includeTrack.onclick = () => {
    includeState = !includeState; if (includeState) onlyState = false;
    paintSwitch(includeTrack, includeKnob, includeStateTxt, includeState);
    paintSwitch(onlyTrack, onlyKnob, onlyStateTxt, onlyState);
  };
  onlyTrack.onclick = () => {
    onlyState = !onlyState; if (onlyState) includeState = false;
    paintSwitch(onlyTrack, onlyKnob, onlyStateTxt, onlyState);
    paintSwitch(includeTrack, includeKnob, includeStateTxt, includeState);
  };


  // ===== Progress =====
  progressBar = document.createElement('div');
  Object.assign(progressBar.style, { width: '100%', height: '18px', position: 'relative', margin: '2px 0 8px', overflow: 'hidden', borderRadius:'999px', border:'1px solid' });
  progressFill = document.createElement('div'); Object.assign(progressFill.style, { height: '100%', width: '0%', transition: 'width .3s ease', borderRadius: '999px' });
  progressLabel = document.createElement('div'); Object.assign(progressLabel.style, { position: 'absolute', inset: 0, display: 'flex', alignItems: 'center', justifyContent: 'center', fontWeight: '700', fontSize:'12px' });
  progressBar.append(progressFill, progressLabel);
  scrollInner.appendChild(progressBar);


  // ===== Filter =====
  filterInput = document.createElement('input');
  Object.assign(filterInput.style, { width: '100%', padding: '10px 12px', margin: '6px 0 10px', borderRadius: '10px', outline: 'none', border:'1px solid', fontSize:'14px' });
  filterInput.placeholder = STR[lang].filterPh;
  scrollInner.appendChild(filterInput);


  // ===== List =====
  list = document.createElement('ul');
  Object.assign(list.style, { listStyle: 'none', padding: '0', maxHeight: '48vh', overflowY: 'auto', margin: '4px 0 10px', borderRadius: '12px', border:'1px solid' });
  scrollInner.appendChild(list);


  // ===== Bottom grid (botones + estado) =====
  bottomGrid = document.createElement('div');
  Object.assign(bottomGrid.style,{display:'grid',gridTemplateColumns:'1fr',gap:'10px',alignItems:'start',marginTop:'6px'});
  scrollInner.appendChild(bottomGrid);


  leftCol = document.createElement('div');
  rightCol = document.createElement('div');
  bottomGrid.append(leftCol, rightCol);


  // Buttons
  buttonContainer = document.createElement('div');
  Object.assign(buttonContainer.style, { display: 'grid', gap: '8px' });
  function baseBtn(bg){ return { padding: '12px', border: 'none', borderRadius: '10px', background: bg, color: '#fff', cursor: 'pointer', fontWeight: '700', letterSpacing: '.2px', width:'100%', fontSize:'14px' }; }
  startBtn   = document.createElement('button'); Object.assign(startBtn.style,   baseBtn('#db8e30')); startBtn.textContent   = STR[lang].start;
  copyBtn    = document.createElement('button'); Object.assign(copyBtn.style,    baseBtn('#1976d2')); copyBtn.textContent    = STR[lang].copy;      copyBtn.style.display='none';
  downloadBtn= document.createElement('button'); Object.assign(downloadBtn.style,baseBtn('#22c55e')); downloadBtn.textContent= STR[lang].download;  downloadBtn.style.display='none';
  stopBtn    = document.createElement('button'); Object.assign(stopBtn.style,    baseBtn('#d32f2f')); stopBtn.textContent    = STR[lang].stop;      stopBtn.style.display='none';
  restartBtn = document.createElement('button'); Object.assign(restartBtn.style, baseBtn('#ffa000')); restartBtn.textContent = STR[lang].restart;   restartBtn.style.display='none';
  actionBar = document.createElement('div'); actionBar.appendChild(buttonContainer);
  buttonContainer.append(startBtn, copyBtn, downloadBtn, stopBtn, restartBtn);
  leftCol.appendChild(actionBar);


  // Status + version
  statusCard = document.createElement('div');
  Object.assign(statusCard.style,{borderRadius:'12px',padding:'10px',border:'1px solid',boxShadow:'0 3px 8px rgba(0,0,0,.06)'});
  statusPill = document.createElement('div');
  Object.assign(statusPill.style,{display:'inline-flex',alignItems:'center',gap:'8px',borderRadius:'999px',padding:'6px 10px',fontWeight:'600',border:'1px solid',fontSize:'13px'});
  statusDot  = document.createElement('span'); statusDot.textContent='‚óªÔ∏é'; statusDot.style.fontSize='12px';
  status     = document.createElement('span'); status.textContent = STR[lang].ready;
  statusPill.append(statusDot, status);
  statusCard.appendChild(statusPill);


  versionCard = document.createElement('div');
  Object.assign(versionCard.style,{borderRadius:'12px',padding:'8px 10px',border:'1px solid',marginTop:'8px',boxShadow:'0 3px 8px rgba(0,0,0,.06)',fontSize:'12px'});
  footer = document.createElement('div'); footer.textContent = 'Desarrollado por Karlo Buds ¬∑ v060625.35 (hover rojo)';
  versionCard.appendChild(footer);
  rightCol.append(statusCard, versionCard);


  // ===== Paint utils & switches =====
  function paintLabels(){
    const t = THEMES[theme];
    [langLeftLbl, langRightLbl, themeLeftLbl, themeRightLbl].forEach(el => { el.style.color=t.text; el.style.opacity=.7; });
    (lang==='es' ? langLeftLbl : langRightLbl).style.opacity = 1;
    (theme==='dark' ? themeRightLbl : themeLeftLbl).style.opacity = 1;
  }
  function paintTrack(trackEl, knobEl, isOn){
    const t = THEMES[theme];
    trackEl.style.background = isOn ? '#22c55e' : (theme==='dark' ? '#202020' : '#efefef');
    trackEl.style.borderColor = t.border;
    knobEl.style.background = (theme==='dark' ? '#3a3a3a' : '#fff');
    knobEl.style.borderColor = t.border;
    knobEl.style.transform = isOn ? `translateX(${TRAVEL}px)` : 'translateX(0)';
  }
  function paintSwitch(trackEl, knobEl, txtEl, isOn){
    paintTrack(trackEl, knobEl, isOn);
    if (txtEl){ txtEl.textContent = S().onTxt ? (isOn ? S().onTxt : S().offTxt) : (isOn ? 'On' : 'Off'); txtEl.style.color = THEMES[theme].text; }
  }
  function paintTitle(){
    const t = THEMES[theme];
    headerCard.style.background = t.card; headerCard.style.borderColor = t.border;
    const all = title.querySelectorAll('*'); for (let i=0;i<all.length;i++) all[i].style.color = t.text;
    const subs = title.querySelectorAll('div > div > div'); if (subs.length>=3){ subs[1].style.color=t.subtext; subs[2].style.color=t.subtext; }
  }


  // ‚Äî‚Äî Traducci√≥n segura de botones Unfollow
  function updateUnfollowLabels(root){
    const target = root || list;
    const arr = target.querySelectorAll('a[data-unf]');
    for (let i = 0; i < arr.length; i++) {
      arr[i].textContent = STR[lang].unfollow;
      arr[i].setAttribute('aria-label', STR[lang].unfollow);
    }
  }
  function forceRepaintUnfollowButtons(){
    updateUnfollowLabels();
    setTimeout(updateUnfollowLabels, 100); // por si entraron filas despu√©s
  }


  // ‚Äî‚Äî Contraste de la lista
  function paintListContainer(){
    const t = THEMES[theme];
    list.style.background = (theme === 'dark') ? '#141414' : '#ffffff';
    list.style.borderColor = t.border;
  }
  function paintListRows(){
    const t = THEMES[theme];
    const rows = list.querySelectorAll('li > div');
    rows.forEach(row => {
      const li = row.parentElement;
      li.style.background = (theme === 'dark') ? '#181818' : '#fff';
      li.style.borderBottom = '1px solid ' + t.border;
      const nameEl = row.querySelector('a div div:first-child');
      const userEl = row.querySelector('a div div:nth-child(2)');
      if (nameEl) nameEl.style.color = t.text;
      if (userEl) userEl.style.color = t.subtext;
      const btn = row.querySelector('a[data-unf]');
      if (btn){
        btn.classList.add('__uf_unfbtn'); // clase para el hover SIEMPRE rojo
        btn.style.background = t.badgeBg;
        btn.style.color = t.badgeText;
        btn.style.border = '1px solid ' + t.badgeBorder;
      }
    });
  }


  function applyTheme(next){
    theme = next; localStorage.setItem('theme', next);
    const t = THEMES[next];


    Object.assign(container.style, {
      background: t.card, color: t.text, border: '1px solid ' + t.border,
      boxShadow: (next==='light' ? '0 8px 24px rgba(0,0,0,.12)' : '0 8px 24px rgba(0,0,0,.55)')
    });


    closeBtn.style.background  = (next === 'dark') ? '#2a2a2a' : '#fff';
    closeBtn.style.color       = (next === 'dark') ? '#fff'   : '#111';
    closeBtn.style.borderColor = t.border;
    closeBtn.style.boxShadow   = (next==='light' ? '0 4px 14px rgba(0,0,0,.15)' : '0 4px 14px rgba(0,0,0,.55)');


    paintTitle();
    paintLabels();


    // Lang / Theme tracks
    paintTrack(langTrack,  langKnob,  lang==='en');
    paintTrack(themeTrack, themeKnob, next==='dark');


    // Chips
    [includeRow, onlyRow].forEach(c => { c.style.background = t.chipBg; c.style.borderColor = t.border; });
    includeLabel.style.color = t.text; onlyLabel.style.color = t.text;
    paintSwitch(includeTrack, includeKnob, includeStateTxt, includeState);
    paintSwitch(onlyTrack,    onlyKnob,    onlyStateTxt,  onlyState);


    // Progreso
    progressBar.style.borderColor = t.border;
    progressFill.style.background = 'linear-gradient(90deg,#22c55e,#16a34a)';
    progressLabel.style.color = (next==='light' ? '#000' : '#fff');


    // Filtro
    Object.assign(filterInput.style, { background:t.inputBg, color:t.text, border:'1px solid '+t.inputBorder });


    // Lista
    paintListContainer();
    paintListRows();


    // Botones
    [startBtn, copyBtn, downloadBtn, stopBtn, restartBtn].forEach(b => {
      b.style.boxShadow = (next==='light' ? '0 1px 2px rgba(0,0,0,.08)' : '0 1px 2px rgba(0,0,0,.35)');
    });


    // Tarjetas
    statusCard.style.background = t.card; statusCard.style.borderColor = t.border;
    statusPill.style.borderColor = t.border; statusPill.style.background = t.chipBg; status.style.color=t.text;
    versionCard.style.background = t.card; versionCard.style.borderColor = t.border;
    footer.style.color = t.muted;


    // Asegurar texto traducido
    forceRepaintUnfollowButtons();
    updateStatusText();
  }


  function applyLang(nextLang){
    lang = nextLang; localStorage.setItem('lang', lang);


    renderTitle();
    includeLabel.textContent = STR[lang].verified;
    onlyLabel.textContent    = STR[lang].onlyVerified;
    filterInput.placeholder  = STR[lang].filterPh;
    startBtn.textContent     = STR[lang].start;
    stopBtn.textContent      = STR[lang].stop;
    restartBtn.textContent   = STR[lang].restart;
    copyBtn.textContent      = STR[lang].copy;
    downloadBtn.textContent  = STR[lang].download;


    // Reaplicar tema (colores)
    applyTheme(theme);


    // Re‚Äëtraducir contenido ya mostrado
    updateStatusText();
    setProgress(scanned, total);
    forceRepaintUnfollowButtons();


    // Footer por idioma
    footer.textContent = (lang === 'es')
      ? 'Desarrollado por Karlo Buds ¬∑ Spy Insta Follow ¬∑ v060625.35'
      : 'Developed by Karlo Buds ¬∑ Spy Insta Follow ¬∑ v060625.35';
  }


  // ===== Events =====
  langTrack.onclick  = () => applyLang(lang==='es' ? 'en' : 'es');
  themeTrack.onclick = () => applyTheme(theme==='light' ? 'dark' : 'light');


  copyBtn.onclick = function(){
    const lines = nonFollowers.map(u => (u.full_name || STR[lang].noname) + ' - @' + u.username);
    navigator.clipboard.writeText(lines.join('\n')); alert(STR[lang].copied);
  };
  downloadBtn.onclick = function(){
    const lines = nonFollowers.map(u => (u.full_name || STR[lang].noname) + ' - @' + u.username);
    const blob = new Blob([lines.join('\n')], { type:'text/plain' });
    const a = document.createElement('a'); a.href = URL.createObjectURL(blob); a.download = STR[lang].file; a.click(); URL.revokeObjectURL(a.href);
  };
  function setSwitchEnabled(rowEl, enabled) {
    rowEl.style.opacity = enabled ? '1' : '0.55';
    rowEl.style.pointerEvents = enabled ? 'auto' : 'none';
  }
  function updateStatusText(){
    if (!status) return;
    if (runState === 'scanning'){ status.textContent = STR[lang].scanning; statusDot.textContent='‚è≥'; }
    else if (runState === 'stopped'){ status.textContent = STR[lang].stopped; statusDot.textContent=' üõë '; }
    else if (runState === 'done'){ status.textContent = STR[lang].done(nonFollowers.length||0); statusDot.textContent='‚úÖ'; }
    else { status.textContent = STR[lang].ready; statusDot.textContent='üòé'; }
  }
  function setProgress(sc, tot){
    const p = tot>0 ? Math.min(100, Math.round((sc/tot)*100)) : 0;
    progressFill.style.width = p + '%';
    progressLabel.textContent = STR[lang].progress(p, sc, tot||'?');
  }


  stopBtn.onclick = function () {
    shouldStop = true; runState = 'stopped'; updateStatusText();
    stopBtn.style.display = 'none'; startBtn.style.display = 'inline-block'; copyBtn.style.display = 'inline-block'; downloadBtn.style.display = 'inline-block';
    setSwitchEnabled(includeRow, true); setSwitchEnabled(onlyRow, true);
  };
  restartBtn.onclick = function () {
    after = null; hasNext = true; shouldStop = false; nonFollowers = []; scanned = 0; total = 0; list.innerHTML = '';
    progressFill.style.width = '0%'; progressLabel.textContent = '';
    runState = 'scanning'; updateStatusText();
    restartBtn.style.display = 'none'; stopBtn.style.display = 'inline-block';
    setSwitchEnabled(includeRow, false); setSwitchEnabled(onlyRow, false);
    scanFollowers();
  };
  startBtn.onclick = function () {
    after = null; hasNext = true; shouldStop = false; nonFollowers = []; scanned = 0; total = 0; list.innerHTML = '';
    progressFill.style.width = '0%'; progressLabel.textContent = '';
    runState = 'scanning'; updateStatusText();
    startBtn.style.display = 'none'; stopBtn.style.display = 'inline-block'; restartBtn.style.display = 'none';
    copyBtn.style.display = 'none'; downloadBtn.style.display = 'none';
    setSwitchEnabled(includeRow, false); setSwitchEnabled(onlyRow, false);
    scanFollowers();
  };


  // ===== Filter & List =====
  filterInput.addEventListener('input', function () {
    const f = filterInput.value.toLowerCase();
    const items = list.querySelectorAll('li');
    for (let i=0;i<items.length;i++) items[i].style.display = items[i].innerText.toLowerCase().indexOf(f) !== -1 ? '' : 'none';
  });


  function styleListItemColors(li){
    const t = THEMES[theme];
    li.style.borderBottom = '1px solid ' + t.border;
    const links = li.querySelectorAll('a'); for (let i=0;i<links.length;i++) links[i].style.color = t.linkText;
    const btn = li.querySelector('a[data-unf]');
    if (btn) {
      btn.classList.add('__uf_unfbtn');
      btn.style.background = t.badgeBg;
      btn.style.color = t.badgeText;
      btn.style.border = '1px solid ' + t.badgeBorder;
    }
  }
  function styleListItem(li){
    styleListItemColors(li);
    li.onmouseenter = () => { li.style.background = (theme==='dark' ? '#242424' : '#f8f9fa'); };
    li.onmouseleave = () => { li.style.background = 'transparent'; };
  }
  function addToListSorted(node){
    const li = document.createElement('li');
    li.innerHTML =
      '<div style="display:flex;align-items:center;justify-content:space-between;padding:8px 6px;">' +
      '<a href="https://instagram.com/' + node.username + '" target="_blank" style="display:flex;align-items:center;text-decoration:none;gap:10px;flex:1;min-width:0;color:inherit;">' +
      '<img src="' + node.profile_pic_url + '" alt="' + node.username + '" style="width:32px;height:32px;border-radius:50%;flex:0 0 auto;">' +
      '<div style="min-width:0;">' +
      '<div style="font-weight:600;">' + (node.full_name ? node.full_name : '<span data-noname>' + STR[lang].noname + '</span>') + ' ' + (node.is_verified ? '‚úÖ' : '') + '</div>' +
      '<div style="font-size:12px;opacity:.9;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;">@' + node.username + '</div>' +
      '</div>' +
      '</a>' +
      '<a data-unf href="https://instagram.com/' + node.username + '" target="_blank" class="__uf_unfbtn" style="margin-left:10px;font-size:12px;padding:6px 10px;border-radius:8px;text-decoration:none;flex:0 0 auto;">' + STR[lang].unfollow + '</a>' +
      '</div>';
    const items = Array.prototype.slice.call(list.children);
    let idx = -1;
    for (let i=0;i<items.length;i++){
      const name = items[i].innerText.toLowerCase();
      const newName = (node.full_name || node.username).toLowerCase();
      if (newName < name) { idx = i; break; }
    }
    if (idx === -1) list.appendChild(li); else list.insertBefore(li, items[idx]);
    styleListItem(li); updateUnfollowLabels(li);
  }


  function computePasses(node){
    if (onlyState) return !!node.is_verified;      // Solo verificados
    return includeState ? true : !node.is_verified; // Incluir todos o excluir verificados
  }


  listObserver = new MutationObserver(function (muts) {
    for (let i=0;i<muts.length;i++) muts[i].addedNodes.forEach(function (n) {
      if (n.nodeType === 1) { updateUnfollowLabels(n); paintListRows(); }
    });
  });
  listObserver.observe(list, { childList: true });


  // ===== Init =====
  applyTheme(theme);
  applyLang(lang);
  updateStatusText();


  // User info async
  userInfoPromise.then(function (info) {
    try {
      if (info && info.user) {
        if (info.user.username) currentUsername = info.user.username;
        if (info.user.profile_pic_url) {
          avatarHTML = '<img src="' + info.user.profile_pic_url + '" alt="@' + currentUsername + '" style="width:36px;height:36px;border-radius:50%;border:2px solid #ccc;">';
        }
        renderTitle(); applyTheme(theme);
      }
    } catch (e) {}
  });


  // ===== Scan logic =====
  async function scanFollowers(){
    while (hasNext && !shouldStop){
      const variables = { id: userId, include_reel: true, fetch_mutual: false, first: 24 };
      if (after) variables.after = after;
      const url = '/graphql/query/?query_hash=3dec7e2c57367ef3da3d987d89f9dbc8&variables=' + encodeURIComponent(JSON.stringify(variables));
      const res = await fetch(url, { credentials:'same-origin' });
      const data = await res.json();
      const edgeFollow = data && data.data && data.data.user && data.data.user.edge_follow; if (!edgeFollow) break;
      if (total === 0) total = edgeFollow.count || 0;


      for (let i=0;i<edgeFollow.edges.length;i++){
        const node = edgeFollow.edges[i].node; scanned++;
        if (!node.follows_viewer && computePasses(node)){ nonFollowers.push(node); addToListSorted(node); }
      }
      setProgress(scanned, total);
      hasNext = edgeFollow.page_info.has_next_page; after = edgeFollow.page_info.end_cursor;
      await sleep(1500 + Math.random()*800);
    }
    if (!shouldStop){
      runState = 'done'; updateStatusText();
      // asegurar traducci√≥n y contraste al terminar
      forceRepaintUnfollowButtons();
      paintListRows();


      startBtn.style.display = 'inline-block'; stopBtn.style.display = 'none';
      copyBtn.style.display = 'inline-block'; downloadBtn.style.display = 'inline-block';
      setSwitchEnabled(includeRow, true); setSwitchEnabled(onlyRow, true);
      restartBtn.style.display = 'inline-block';
    }
  }
})();


